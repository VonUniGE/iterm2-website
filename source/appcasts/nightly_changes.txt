2020-09-30: Send a newline before curl to install shell
integration. Issue 9166

2020-09-29: At some point the menu item validation for bury:
was removed. Fix it. Issue 9163

2020-09-29: Performance improvements for history
restoration. Limit lines to 20k. Stop encoding block arrays
when truncating.

2020-09-28: Fix a bug where you could save state before
restoration begins, causing the db to have two roots.

2020-09-27: Prevent childJobNameTuples from returning tuples
with nil entries. Fixes a crash in -[PTYSession
promptOnCloseReason].

2020-09-27: Show a warning when the app support folder can't
be found/created

2020-09-27: Don't delete state restoration data by unlinking
the sqlite db.

This can cause an EXC_GUARD exception because apparently
sqlite marks its file descriptors protected and trying to
unlink the files can cause a crash. Or is it not a crash? I
don't know, but it writes a crash dump (which says
"SIMULATED (this is NOT a crash)").

At any rate it isn't good. I saw this happen when
terminating the app and the main thread unlinks the db while
another thread is inside sqlite3Close().

Relevant snippet from crash log:

Exception Type:        EXC_GUARD Exception Codes:
0x800000040000d364, 0x08fd4dbfade2dead Exception Subtype:
GUARD_TYPE_VN, id=0x08fd4dbfade2dead, pid=54116,
flavor=0x00000004 (VNG_UNLINK) Exception Note:
SIMULATED (this is NOT a crash) Termination Reason:
Namespace <0x17>, Code 0x1 Termination Details:   <0x17>,
/Users/jkoftinoff/Library/Application
Support/iTerm2/SavedState/restorable-state.sqlite-wal

Application Specific Information: dyld: in dladdr()
Performing @selector(terminate:) from sender NSMenuItem
0x600003613020

Thread 0 Crashed: 0   libsystem_kernel.dylib
0x00007fff6c5a7ee2 __unlink + 10 1   libsystem_kernel.dylib
0x00007fff6c5a7ec4 unlink + 11 2   libremovefile.dylib
0x00007fff6c498b36 __removefile_tree_walker + 298 3
libremovefile.dylib                 0x00007fff6c498995
removefile + 153 4   com.apple.Foundation
0x00007fff34a3a51c -[NSFilesystemItemRemoveOperation main] +
186 5   com.apple.Foundation
0x00007fff34a22981 __NSOPERATION_IS_INVOKING_MAIN__ + 17 6
com.apple.Foundation                0x00007fff34a21bb3
-[NSOperation start] + 722 7   com.apple.Foundation
0x00007fff34a3a36f -[NSFileManager removeItemAtPath:error:]
+ 84 8   com.googlecode.iterm2
0x0000000104def49f -[iTermSqliteDatabaseImpl unlink] + 463 9
com.googlecode.iterm2               0x0000000104cd0f4c
+[iTermRestorableStateSQLite unlinkDatabaseAtURL:] + 90 10
com.googlecode.iterm2               0x0000000104cd15e3
-[iTermRestorableStateSQLite eraseStateRestorationData] + 92
11  com.googlecode.iterm2               0x0000000104f00e3d
-[iTermRestorableStateDriver erase] + 48 12
com.apple.CoreFoundation            0x00007fff3239d80f
__CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 12
13  com.apple.CoreFoundation            0x00007fff3239d7a3
___CFXRegistrationPost1_block_invoke + 63 14
com.apple.CoreFoundation            0x00007fff3239d718
_CFXRegistrationPost1 + 372 15  com.apple.CoreFoundation
0x00007fff3239d384 ___CFXNotificationPost_block_invoke + 80
16  com.apple.CoreFoundation            0x00007fff3236d4fd
-[_CFXNotificationRegistrar
find:object:observer:enumerator:] + 1554 17
com.apple.CoreFoundation            0x00007fff3236c9a9
_CFXNotificationPost + 1351 18  com.apple.Foundation
0x00007fff349ea786 -[NSNotificationCenter
postNotificationName:object:userInfo:] + 59 19
com.googlecode.iterm2               0x0000000104c41d03
-[iTermApplicationDelegate applicationShouldTerminate:] +
1721 20  com.apple.AppKit
0x00007fff2f8f95f3 -[NSApplication
_docController:shouldTerminate:] + 88 21  com.apple.AppKit
0x00007fff2f8f94c8 __91-[NSDocumentController(NSInternal)
_closeAllDocumentsWithDelegate:shouldTerminateSelector:]_block_invoke
+ 448 22  com.apple.AppKit
0x00007fff2f8f9182 -[NSDocumentController(NSInternal)
_closeAllDocumentsWithDelegate:shouldTerminateSelector:] +
1187 23  com.apple.AppKit
0x00007fff2f8f8cb8 -[NSDocumentController(NSInternal)
__closeAllDocumentsWithDelegate:shouldTerminateSelector:] +
291 24  com.apple.AppKit
0x00007fff2f8f88d7 -[NSApplication _shouldTerminate] + 975
25  com.apple.AppKit                    0x00007fff2f8e5d63
-[NSApplication terminate:] + 740 26  com.apple.AppKit
0x00007fff2f85a7a7 -[NSApplication(NSResponder)
sendAction:to:from:] + 299 27  com.apple.AppKit
0x00007fff2f96af3e -[NSMenuItem _corePerformAction] + 312 28
com.apple.AppKit                    0x00007fff2f96acba
-[NSCarbonMenuImpl
performActionWithHighlightingForItemAtIndex:] + 106 29
com.apple.AppKit                    0x00007fff2f969bb7
-[NSMenu performKeyEquivalent:] + 412 30  com.apple.AppKit
0x00007fff2fd9f9ab routeKeyEquivalent + 521 31
com.apple.AppKit                    0x00007fff2f7bb87d
-[NSApplication(NSEvent) sendEvent:] + 1161 32
com.googlecode.iterm2               0x0000000104ae2dc2
-[iTermApplication sendEvent:] + 354 33  com.apple.AppKit
0x00007fff2f6085bf -[NSApplication run] + 707 34
com.apple.AppKit                    0x00007fff2f5da396
NSApplicationMain + 777 35  com.googlecode.iterm2
0x0000000104a3d323 main + 115 36  libdyld.dylib
0x00007fff6c463cc9 start + 1

Thread 24: 0   libsystem_kernel.dylib
0x00007fff6c5a7ee2 __unlink + 10 1   libsystem_kernel.dylib
0x00007fff6c5a7ec4 unlink + 11 2   libsqlite3.dylib
0x00007fff6b4c41d1 unixDelete + 49 3   libsqlite3.dylib
0x00007fff6b4c10b8 sqlite3WalClose + 456 4
libsqlite3.dylib                    0x00007fff6b4c0cfa
sqlite3PagerClose + 314 5   libsqlite3.dylib
0x00007fff6b4c0700 sqlite3BtreeClose + 320 6
libsqlite3.dylib                    0x00007fff6b4ed402
sqlite3LeaveMutexAndCloseZombie + 482 7   libsqlite3.dylib
0x00007fff6b4f86bf sqlite3Close + 2239 8
com.googlecode.iterm2               0x0000000104d1ee55
-[FMDatabase close] + 59 9   com.googlecode.iterm2
0x0000000104cd2d1e __32-[iTermGraphDatabase
invalidate]_block_invoke + 82 10  com.googlecode.iterm2
0x0000000104ad37b4 __29-[iTermThread
dispatchAsync:]_block_invoke + 57 11  libdispatch.dylib
0x00007fff6c4096c4 _dispatch_call_block_and_release + 12 12
libdispatch.dylib                   0x00007fff6c40a658
_dispatch_client_callout + 8 13  libdispatch.dylib
0x00007fff6c40fc44 _dispatch_lane_serial_drain + 597 14
libdispatch.dylib                   0x00007fff6c4105d6
_dispatch_lane_invoke + 363 15  libdispatch.dylib
0x00007fff6c419c09 _dispatch_workloop_worker_thread + 596 16
libsystem_pthread.dylib             0x00007fff6c664a3d
_pthread_wqthread + 290 17  libsystem_pthread.dylib
0x00007fff6c663b77 start_wqthread + 15

2020-09-27: Prevent crazy ranges in getting selected
indexes. This caused a crash.

2020-09-27: Don't confirm quit when Sparkle is upgrading.
Fixes a longstanding bug.

2020-09-26: The previous test for whether windows should be
saved was wrong.

NSQuitAlwaysKeepsWindows reflects the setting of the "close
windows when quitting an app" system preference. But it can
be overridden when restarting or logging out. When you log
out, you're asked if you want to restore windows when
logging back in. If you turn that on then state should be
saved irrsepective of the "close windows when quitting an
app" setting.

Luckily there's a friendly private API to access this.

This commit also changes the restoration behavior to be more
like macOS: if there is saved stuff, restore it. Previously,
we'd delete the saved stuff if NSQuitAlwaysKeepsWindows was
off, but obvs that's no good any more. I am amused that the
awkward-sounding wording of "close windows when quitting an
app" was actually written that way to be a technically
correct description of how state saving works.

Issue 9156

2020-09-26: Fix dection of tmux 1.8. Issue 9133

2020-09-26: Add debug logging for issue 4575

2020-09-26: Add debug logging for state saving

2020-09-26: Trim newlines when exfiltrating environment
variables. Kinda fixes issue 9066, which failed to connect
to the daemon because of this (the issue of entering a pin
means that issue is still busted though)

2020-09-26: Widen the prefs panel in big sur so the prefs
search field doesn't hide the advanced tab when focused

2020-09-23: Disable the cadence controller when there is a
modal window to try to fix a hang. Issue 9093

2020-09-23: Show a warning when system window restoration is
selected but system prefs has disabled it. Issue 6270
(comment by @bradchoate).

2020-09-23: Make tmux version detection more robust and add
debug logging for issue 9133

2020-09-22: Move ligature warning closer to Font subtitle

2020-09-22: Rebuild frameworks with xcode 12.2 beta

2020-09-22: Add support for getting the line number from a
python-style filename that doesn't have a colon. Fix support
for the colon-style thing too. Fix failing tests. Issue 7518

This change modifies the regex used to find the suffix of a
filename, which might have unexpected consequences. If
semantic history breaks in some case I'm not thinking of,
this will be the commit to revert.

2020-09-22: Disable broken test

2020-09-20: Fix a bug where SessionView's scrollview got
ordered beneath its imageview when splitting a pane. Issue
9148

2020-09-20: Ensure tab GUIDs are unique. When a tab is
created from an arrangement, it generates a new GUID if
another tab with that GUID already exists.

2020-09-19: let xcode party on its files

2020-09-19: Fix overlapping views, ugly sliders in big sur

2020-09-19: If we run out of data while parsing the mode for
an OSC/APC code, backtrack the parser to the beginning of
the mode. When parsing resumes, it will need to re-parse the
mode. This fixes a bug where it tried to parse the mode
beginning at the first byte of new data after the previously
parse mode, causing it to see a mode of 0, and spuriously
changing the title. Issue 9144

2020-09-19: Fix delegate ot touch bar label text field in
edit key action window controller, which was set to nil
probably by mistake. Issue 9147

2020-09-19: Rename key reporting modes. Add debug logging
for window creation timing

2020-09-18: Avoid updating status bar component when the
configuration is updated but with no change. In particular
this is a problem with auto-rainbow, which sets the color of
all components to their current value. That triggers a call
to updateWithKnobValues (in the case of the RPC component)
which triggers a new fetch which triggers a layout and then
you get an infinite loop of layout-fetch-layout-fetch. Git
component had the same issue. Issue 9139

2020-09-18: Fix a bug where we would open two untitled
windows at startup for some users. Issue 9146

2020-09-18: Prevent automatic profile switching from
switching profiles reentrantly. Somehow a user got an
infinite loop of this in issue 9125, though I can't
reproduce it.

2020-09-17: Disable auto-hide menu bar when unconditionally
in UIElement mode. Issue 9143

2020-09-17: Add logging to debug issue 9139

2020-09-17: Fix detection of tmux 2.1, which would sometimes
spuriously fail and make us think it's 2.0. Failing to
detect tmux 3.2 is a disaster because it pauses after 0
seconds. Issue 9133

2020-09-16: Fall back to ~/.iterm2/socket.1 if the normal
path the daemon's unix domain socket is too long to fit.

2020-09-16: Fix crash due to mutating an event tap observer
while enumerating them

2020-09-16: Prevent use of multiserver if the path to socket
would be more than the relatively short max length in
sockaddr_un. Fixes a crash

2020-09-15: Prevent multiple daemons on the same socket
using advisory locks

2020-09-15: Restore children as orphans if it takes too long
to get them from the daemon.

2020-09-15: Implement partial attachment.

When restoring windows, we used to block on attaching to the
daemon. If the daemon is not feeling well, it can take
forever.

Now we wait to restore the windows until we have received
child reports from the daemon. We create the job manager as
part of this process. Then we can restore the arrangement
and marry up the job manager with the PTYTask for the new
session.

2020-09-13: Composer improvements: turn off the various
automatic substitutions. Change the shortcut to cmd-shift-.
since cmd-. is a shortcut for esc

2020-09-13: Don't allow setting a user value with a dot. Add
an assert with message for an assert that I think was
because of this.

2020-09-13: Beta assert if you can't get the app support
directory to get the reason why, since there were beta
crashes for it being nil.

2020-09-13: Don't use NSTask.waitUntilExit because it's not
safe to use off the main thread. FFS

2020-09-13: Remove filterWithBlock which is the same as
filteredWithBlock

2020-09-13: Don't write unsyncable keys when saving prefs

2020-09-13: Clean up untitled window opening during startup
and don't block the main thread on loading the restorable
state.

Delay running post-restoration block until sqlite-based
restoration completes.

Allow multiple post-restoration blocks.

Prevent opening an untitled window until sqlite-based and
native restoration is done.

Use the utntiled window state machine to prevent opening
untitled windows when the default arrangement is opened or
initial untitled windows are disabled.

Rewrite the untitled window state machine to be simpler.

Do not adopt orphans until window restoration is completely
finished.

Do not open an untitled window until window restoration is
completely finished.

Fix invalidation of iTermGraphDatabase, which didn't assign
to _invalid.

Make attemptRecovery:encoder: close the db when it fails.

Grant the restorable state controller the ability to notify
its delegate when it has enqueued restoration for all
windows.

Load the restoration index asynchronously when using
sqlite-based restoration to avoid blocking the app on
loading that state.

2020-09-13: Remove TODO. When we initially load the image it
is not attached to a window so it uses scale 2. That works
fine when going from hidpi to lowdpi or vice versa.

2020-09-13: Add bellCount variable to enable the analog bell
in PR 428

2020-09-12: Fix a bug where tmux windows would shrink on
10.14 when there was a window border. The root terminal view
incorrectly computed the tabview size: it subtracted a point
for a bottom border inset. PseudoTerminal's
windowDecorationSize correctly ignored it. That caused the
tab view to be a point smaller thanit should have been,
which caused tmux to shrink the window by one cell. The
problem continues to repeat until it's 1x1 and it
disconnects. Same issue for side margins. Issue 9048

2020-09-12: Add proper support for modifyOtherKeys. Change
cursor keys based on application cursor keys, not
application keypad mode.

2020-09-12: Fix warnings

2020-09-11: Assign identifiers to the window style menu
items and regen python docs

2020-09-11: Re-sign sync_title.its and theme.its using
sigarchive v2

2020-09-11: Add more logging for why the password manager
closes for issue 9129

2020-09-11: Fix a bug where we'd resize the session when
changing the active space because the backing scale factor
became 0 when the view was in an inactive space. Issue 9132

2020-09-11: Drag snippet rows as strings so they can be
dropped in PTYTextView

2020-09-11: Fix prefs toolbar on Big Sur

2020-09-11: Fix a bunch of bugs with XMP invalidation
handlers, which are dark magic

2020-09-11: Improve sqlite-based state restoration.

- Eliminate the unnecessary factory class.  - Add an
advisory lock to keep two iTerm2 processes from writing to
the same db, which breaks it.  - Refactoring to simplify
various things.  - Fix a number of assertion failures in
recovery scenarios. I tested deleting the sqlite db,
changing its permissions to 000, and deleting & changing its
directory permissions to 000.  - Fix a bug where didSave was
never called because weakSelf was not initialized.

I need to come back and fix the unit tests, which were
broken badly by this change.

2020-09-11: Add Snippets and Actions as first-class
citizens.

Adds a new tab to prefs for Shortcuts, which contains
snippets and actions.  Add status bar components, main menu
items, and context menu items.  Add snippets to open
quickly.

2020-09-10: Support file urls with fragments

2020-09-09: Disable enabling CSI u mode by control sequence

2020-09-07: Open prefs panel centered on the screen

2020-09-07: Status bar improvements:

- Report errors from status bar function call component.  -
Make all non-graphic status bar components have min/max
width.  - Change both layout algorithms to respect min/max
width.  - Modify the stable layout algorithm to allow
variable sizes when min/max widths are present.  - Fix how
the function call component measures its minimum width.  -
Make graphic components' min size the number of values they
can hold, which reduces the amount of status bar layout that
happens before they have that many values.

2020-09-07: Fix fragmenting large messages sent from server
to client.

2020-09-07: Fix a write to a dangling pointer because there
was a race when setting up a connected unix domain socket.
Trying to do this with threads is probably impossible, so do
it with nonblocking file descriptors instead.

2020-09-06: Remove iTermTrivialExpressionEvaluator, which
was wrong when there was an escaped backslash. Instead,
avoid swifty string evaluation when all the parts of the
interpolated string are literals.

2020-09-06: Change how backslashes are interpreted in
interpolated strings. A backslash followed by an
unrecognized character (not n, a, t, r, or backslash) used
to remove the backslash. But that broke backslashes in
profile custom commands that included a backslash. For
example, launching the repl would have a backslash before
the space in Application Support, which was simply removed.
I don't expect this will be a big problem because people who
escaped their backslashes will not see a difference.
However, people who relied on the backslash being removed
will see different behavior. This fixes the REPL, which was
broken after the removal of the ApplicationSupport symlink.

2020-09-06: Fix a bug where child reports over 1k couldn't
be sent. sendmsg() either sends all or none of its input.

2020-09-06: Fix a bug where the
sources/iTermFileDescriptorMultiClient was released before
its completion block could be called when a handshake fails.
This caused a hang on launch when the job manager's
attachToServer blocked on beginAttachToServer's completion
block running.

2020-09-06: Optimize evaluating swifty strings that have no
subexpressions.

2020-09-06: Optimize calculating the attributed string for a
tab shortcut.

2020-09-04: Add some polish to global search

2020-09-04: Move kScreenStateIntervalTreeKey and
kScreenStateCursorCoord into the right place. Fixes a bug
where marks weren't restored properly

2020-09-03: Remove unreachable code. iTermController is
nilled out before applicationWillTerminate: runs.

2020-09-03: Fix a race. When we save state, the record gets
rowIDs assigned in a private queue but we save the record to
the iTermGraphDatabase on the main queue. If you save twice
in succession, you might see an after record that has no
rowid. I think? It's complicated, but this is definitely an
improvement even if it doesn't fix that bug.

2020-09-03: Don't crash when creating an indexset with range
(NSNotFound,0). Not quite sure how this happened. It's in
the recently refactored selection code. It's silly for
NSIndexSet to assert in this case since it's a reasonable
way to express no range.

2020-09-03: Don't beta-crash when you ask for the cell in
the right margin. It can happeh when auto command completion
is enabled in zsh and you press control C when the cursor is
just before the right margin.

2020-09-03: Bring back support for nvidia GPUs

2020-09-02: Fix a bug where duplicating a tab would not give
the new tab a unique guid, causing a crash when we try to
save session state. When state restoration throws an
exception, log its details in the crash log (previously we
just asserted). Issue 9117.

2020-09-01: Improve dynamic profiles error reporting

2020-09-01: Rate limit errors from background jobs. Issue
9116

2020-09-01: Add debug logging for tab activity state

2020-09-01: Background tabs' sessions' views don't have
windows so we got a backing scale factor of 0 so we would
clear the pixel size in TIOCGWINSZ and then set it properly
when the tab is activated, causing the activity indicator to
toggle. Issue 9099
