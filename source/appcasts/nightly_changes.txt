2021-04-24: Add debug logging for braodcast input for issue
9628

2021-04-24: Don't let a control sequence take you out of CSI
u mode. Issue 9641

2021-04-24: Fix margins on tranferrable file menu item view

2021-04-24: Improve SCPFile logging. Fix a bug where we do
the transfer again after retrying without an agent.

2021-04-24: Update live-resize window size view when a grid
resizes, which for tmux integration happens asynchronously.
Issue 9649

2021-04-22: Allow focus to stay on search field when a
terminal window becomes key. Issue 9644

2021-04-22: Fix the expand arrows in the status bar compose
component. Issue 9633

2021-04-22: Offer to disable remote settings loading when
the location is unset. Isue 9629

2021-04-22: Disable paste bracketing when sending 'cd
directory' due to a drag being dropped. Issue 9625

2021-04-20: In big sur when the tabbar is on top in native
fullscreen make the tabbar a titlebar accessory view
controller only if it is no normally shown. When it *is*
normally shown, we move it out of the titlebar so that it
doesn't get a shadow under it. Issue 9639. This also removes
some AFAICT dead code for disabling titlebar accessory VCs
in big sur (it was off by default)

2021-04-20: Fix inline images on retina displays by storing
both 1x and 2x representations. Issue 9632

2021-04-19: Change how insets are calculated for inline
images to make sense and to work correctly when preserving
aspect ratio. Issue 9632

2021-04-19: Fix data race in iTermImageInfo

2021-04-18: Fix bug where inline images were scaled wrong
introduced by a dumb mistake in
50fc9b4954d79814ce907daf52217702f6700a69. Issue 9632.

2021-04-18: Move cursor to first column after adding
'session contents restored' banner.

2021-04-18: Remove selection when pasting. Issue 9614

2021-04-18: Make smart selection radius configurable

2021-04-18: Allow adhoc versions to install Python API

2021-04-18: Add logFilename variable to session scope. Issue
9609

2021-04-17: Add comments about tmux window/pane titles

2021-04-17: [tmux integration] Prioritize terminalWindowName
over tab.tmuxWindowName for window titles. Issue 9605

2021-04-17: Fix a bug where the session name controller
didn't notify its delegate of a name change when it could be
evaluated synchronously

2021-04-17: [tmux integration] Use pane_title-based value
from session title function for tab title when it's
non-empty; otherwise fall back to tmux window name. Issue
9605

2021-04-17: When launching a Python script start with
iTerm2's environment rather than an empty one so you get
stuff like TMPDIR. Issue 9599

2021-04-17: Don't use status bar composer by adding a
temporary one. Add an advanced pref to enable the old
beahvior. Issue 9633

2021-04-16: Add debug logging

2021-04-16: Search parent directories for git repo. Issue
9630

2021-04-06: Improve error reporting in python runtime
downloader. Issue 8792

2021-04-05: Fix special event handling for control-shift-tab
which sends a character ASCII 25 (end of medium). Issue 9585

2021-04-05: When not synchronizing to find pasteboard don't
store to it. Issue 9595

2021-04-05: Add showingAlternateScreen as a session-scoped
variable.

- Also some edits by gnachman for polish

2021-04-04: Prevent tmux option monitor from polling when
there is a valid subscription

2021-04-04: Track tmux pane current command and use it to
set tab icon. Issue 9604

2021-04-03: Scroll on page up, page down, home, and end when
not in an interactive app. Adds an advanced pref 'Page Up,
Page Down, Home, and End scroll except when in interactive
apps.' to control this. Issue 1407

2021-04-03: Fix API reporting of control-tab. Issue 9585

2021-04-03: Preserve semicolons unencoded in paths in
user-supplied URLs. Issue 9598

2021-04-03: Add a bunch of methods in Tab to documentation.

2021-04-03: Detect when triggers are causing performance
problems and offer to turn them off in interactive apps

2021-04-02: Add option to disable triggers in interactive
apps

2021-04-01: Update fish shell integration and it2api

2021-03-31: limit the number of trigger-initiated command
runners that can run concurrently to (default of) 16. Issue
9596

2021-03-29: Fix advanced pref loadFromFindPasteboard. Issue
9595

2021-03-28: Prevent crash mentioned in issue 9591

2021-03-28: Fix frame of scrollview in command history tool
that caused last line to be cut off. Issue 9593

2021-03-28: Fix installing delta updates of runtime

2021-03-28: Fix discrepancy between legacy and GPU renderers
in size of tiling images. I also think the legacy renderer
didn't actually tilte. See comment in -loadTiledImage for
more info. Issue 9582

2021-03-25: Don't use justified text for crash log (#441)


2021-03-23: Make upload and download colors in network
utilization status bar component configurable. Issue 9583

2021-03-22: Add advanced pref to make toolbelt font size
adjustable. Issue 9586

2021-03-22: Put a border around the hover view

2021-03-22: Fix a flash when temporarily disabling metal
because the legacy view was not redrawn. Issue 9587

2021-03-22: Update tooltip for window border. See PR 440.

2021-03-22: [python, api] Add advanced keystroke
notifications that include key-up and flags-changed. Issue
9585

2021-03-21: Don't replace a stored local pwd from shell
integration with one from the pwd poller because then you
lose symlinks. Issue 9560

2021-03-19: Log info about weak timers to find why there are
so many of them

2021-03-18: Fix tooltip for shift-arrow enters copy mode

2021-03-14: Try the standard string-to-URL conversion before
doing my complicated algorithm. This preserves percent
encoding in paths. Percent encoding won't be preserved in
paths with URLs it can't handle like non-ascii domain names,
but at least now well formed URLs don't get messed with.
Issue 9562.

2021-03-13: Fix support for IPv6 addresses in
URLWithUserSuppliedString. Issue 9568

2021-03-13: Treat tmux version openbsd-6.8 as 3.2. This is
necessary because otherwise it will use the default pause
setting and you're unable to unpause it. This is safe
because it supports 'refresh-client -fpause-after',
'refresh-client -B', and 'refresh-client -fwait-exit'. Issue
9574

2021-03-13: Remove duplicate 'adhoc' in name of adhoc builds

2021-03-13: Scroll when |accumulatedDelta| >= 1. Issue 9386

2021-03-12: Add clear to last mark and to start of
selection. Issue 7343

2021-03-10: Add ability to enable/disable individual
triggers from menu. Issue 9566

2021-03-10: Make it possible to enable/disable triggers

2021-03-10: Add ability to copy triggers to profile from
per-session edit panel

2021-03-10: Move triggers panel into its own file and add
Edit Triggers to Session menu

2021-03-10: Set COPYFILE_DISABLE before creating tarfile for
it2ul (RequestUpload) to avoid including ._ file with
extended attributes, which is generally undesirable. Issue
9553

2021-03-09: Reformat error for read failure for dynamic
profile

2021-03-09: Add advanced pref for dot-directory

2021-03-09: Add Undo Close to menu. Issue 3798

2021-03-09: Show useful info in context menu when hex-ish
characters are selected. Issue 9549

2021-03-09: Fix infinite loop in status bar layout with
stable algorithm when there is only a fixed size spacer. The
bug was that the desired width got set to
view.minimumWidthIncludingIcon and that was less than
maximumWidthForComponent which was infinity.

2021-03-09: Fix unnecessary truncation of git status bar
component with tight packing algorithm

2021-03-09: Invalidate weak timer when the target is
dealloced to try to fix CPU utilization during idle. Issue
9544

2021-03-09: Don't select tab upon mouse-down on non-selected
tab if Option is pressed. This lets you opt-drag a window by
a non-selected tab without selecting it. Issue 9543

2021-03-08: Include shortcuts in window menu. Issue 9542

2021-03-08: Use highest resolution bitmap rep when creating
metal textures to fix blurry timestamps. Issue 9541

2021-03-08: Make iTermSlider not clip to bounds

2021-03-08: Add iTermSlider. It is a view that is meant to
wrap an NSSlider that is created from a XIB. It adds a text
field and steppers. It can handle percentages and integer
values. Issue 9540

2021-03-08: Fix minor typo in setting description (#439)


2021-03-08: Take scale into account in the pixel size in the
TTY when creating a new PTY.

2021-03-07: Fix smart cursor color, which uses NSClipRect
and that call was not updated to use virtual offsets. Issue
9532

2021-03-07: Fix escaping.

Sending text escaped incorrectly in various ways. For
example, the send text keybinding action accepted escaped
controls (\n,\e,\a,\t) but not escaped backslashes so there
is no way to send backslash + a since \a sends a control-G
and \\a sends \\a.

The concept of compatibility escapes is added. Keybinding
actions, touchbar items, Actions, and snippets now track
which mode to use. Newly created ones will NOT use
compatibility escaping while existing ones will.

Compatibility escaping keeps the current suite of bugs. When
off, a sane escaping algorithm is used depending on context.
A number of escaping modes are defined:

none: No escapes, just raw text.  compatibility: "neat", or
\n \e \a \t but not \\ are handled common: \n \e \a \t \b \r
\\ \xXXXX (hex) vim: stringByExpandingVimSpecialCharacters
vimAndCompatibility: stringByExpandingVimSpecialCharacters
  and THEN neat. Terrible!

* The "Send Text" keybinding action escapes using the Common
  mode. Previously it unescaped neat but not \.
* The "Send Text with Vim Special Chars" escapes with the
  Vim mode. Previously it unescaped vim chars and THEN neat.
* The "Send selected text" context menu item now sends the
  literal text. It used to unescape neat.
* Sending a snippet now unescapes using the Common mode. It
  used to unescape neat.
* Pointer "Send Text" actions now use the Common mode.
  Previously it unescaped neat but not \.

In order to effect this, actions, snippets, key bindings,
and touch bar items now track a version. If the version is
unset or 0 then compatibility mode is used. Existing values
automatically get this since the version will be unset for
them. Otherwise if the version is nonzero then we use modern
escaping instead of compatibility.

See mailing list thread subject "Re: [iterm2-discuss] Escape
special characters in snippets"

2021-03-07: Invalidate blend when changing the textview or
PTYSession delegate. Fixes a bug where transparency was off
in restored sessions. Issue 9548

2021-03-04: Change wording in dashboard min windows
threshold to be clearer. Issue 9530

2021-03-04: Replace version.txt when building adhoc

2021-03-04: Change adhoc builds version number to
0.<date>-adhoc so they will autoupdate properly

2021-03-04: Fix metal debugger

2021-03-04: When creating the tmux profile, disable its
hotkey. Issue 9527

2021-03-04: Use ideal tab size for fit window to tabs when
scroller style changes. Issue 9479.

Notes from Kelvin's debug log on that issue:

After adding the tab, tabViewDidChangeNumberOfTabViewItems:
is called. We do
fitWindowToTabsExclusingTmuxTabs:preservingHeight:sizeOfLargestTab:.
The largest tab is found to be 570. This is based on 80
columns wide from a correctly initialized session. Why does
it come up with 570?
_sessionSizeWithCellSize:dimensions:showTitles:showBottomStatusBar:inTerminal:
seems to be the culprit.

It says its scrollerStyle is 1, which is overlay.

So the window initially has overlay scrollers and then they
immediately change to legacy.

1612880636.525463 iTermWindowImpl.m:567 (-[iTermWindow
setFrame:display:]): setFrame:{{442, 170}, {570, 458}}
display:1 maxy=628 of <PseudoTerminal: 0x7fd0d4722060 tabs=1
window=<iTermWindow: 0x7fd0d5837620 frame=NSRect: {{442,
170}, {570, 458}} title=   8025 alpha=1.000000 isMain=1
isKey=1 isVisible=1 delegate=0x7fd0d4722060>> from (
	0   iTerm2
	0x000000010f54e404 -[iTermWindow setFrame:display:]
	+ 189 1   iTerm2
	0x000000010f6d6a65 -[PseudoTerminal
	fitWindowToTabSize:preferredHeight:] + 2912 2
	iTerm2
	0x000000010f6d5ece -[PseudoTerminal
	fitWindowToTabsExcludingTmuxTabs:preservingHeight:sizeOfLargestTab:]
	+ 581 3   iTerm2
	0x000000010f6d8875 -[PseudoTerminal
	scrollerStyleDidChange:] + 215

I can't explain why scrollerStyleDidChange: was called, but
it should have grown the window instead of shrinking the
tab.

scrollerStyleDidChange calls [self
fitWindowToTabsExcludingTmuxTabs:NO preservingHeight:YES].

It has a comment which seems to be a lie:
	// The scrollbar has already been added so tabs'
	current sizes are wrong.  // Use ideal sizes
	instead, to fit to the session dimensions instead of
	// the existing pixel dimensions of the tabs.
The first thing that happens when
fitWindowToTabsExcludingTmuxTabs:preservingHeight: is called
is [self sizeOfLargestTabExcludingTmux:excludeTmux].

It uses [tab currentSize] to compute the size of the largest
tab, which comes out to 570 because it is *NOT* using ideal
sizes.

So why are we not using ideal sizes? Let's see if we used to
and when it was removed.

This commit is responsible: commit
90506bba5beee0b6aa085c18c9680862319abb7b (HEAD,
refs/bisect/bad) Author: George Nachman <gnachman@gmail.com>
Date:   Sat Nov 10 12:12:55 2018 -0800

    When the window size changes because scroller appearance
    changed, preserve its height and adjust only the width.
    Issue 7318 and 6198.

The purpose of the commit was to preserve height, but it is
also preserving width which was not intended.

This commit fixes the error by changing
scrollerStyleDidChange back to use ideal sizes while
preserving height. I tested that the neither the window's
width nor height changes when scroller style changes.

2021-03-04: Remove flexible space from prefs panel. It was
selectable because NSToolbar is insane (it only appears if
selectable!) and also didn't work very well. Issue 9522

2021-03-03: Fix how the GPU renderer determines where
underlines begin and end. They incorrectly started at the
start of the cell plus half the difference between glyph and
cell size. That caused them to appear shifted to the right
when italics were enabled because that increases the glyph
size. But underlines should always begin at the left edge of
the cell. They should terminate at the right edge of the
last cell of a run. The logic for runs did not exist; this
commit adds it to the vertex shader. It starts the underline
at the 'ascii offset', which is where the cell visually
begins. Issue 9521

2021-03-03: Add feature request, fix title of memory usage
issue description

2021-03-03: Add memory usage issue template and remove html
commesn from Crash.md

2021-03-03: provide gitlab description templates (#438)

Introduce issue types

Co-authored-by: Niklas <niklas@janz.online> Co-authored-by:
George Nachman <gnachman+github@gmail.com> 2021-03-02: Fix
snapshots by working around AppKit bug. This fixes mostly
clear images when dragging a tab.

2021-03-01: Bounce metal when a window changes screen. I was
able to reproduce the problem described in issue 9515. The
view hierarchy was fine, but the metal view was broken for
some unknown reason. Issue 9515.

2021-03-01: Fix incorrect test for PTY exhaustion which
casued an assertion failure. Issue 9517
