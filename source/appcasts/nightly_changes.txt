2020-09-18: Avoid updating status bar component when the
configuration is updated but with no change. In particular
this is a problem with auto-rainbow, which sets the color of
all components to their current value. That triggers a call
to updateWithKnobValues (in the case of the RPC component)
which triggers a new fetch which triggers a layout and then
you get an infinite loop of layout-fetch-layout-fetch. Git
component had the same issue. Issue 9139

2020-09-18: Fix a bug where we would open two untitled
windows at startup for some users. Issue 9146

2020-09-18: Prevent automatic profile switching from
switching profiles reentrantly. Somehow a user got an
infinite loop of this in issue 9125, though I can't
reproduce it.

2020-09-17: Disable auto-hide menu bar when unconditionally
in UIElement mode. Issue 9143

2020-09-17: Add logging to debug issue 9139

2020-09-17: Fix detection of tmux 2.1, which would sometimes
spuriously fail and make us think it's 2.0. Failing to
detect tmux 3.2 is a disaster because it pauses after 0
seconds. Issue 9133

2020-09-16: Fall back to ~/.iterm2/socket.1 if the normal
path the daemon's unix domain socket is too long to fit.

2020-09-16: Fix crash due to mutating an event tap observer
while enumerating them

2020-09-16: Prevent use of multiserver if the path to socket
would be more than the relatively short max length in
sockaddr_un. Fixes a crash

2020-09-15: Prevent multiple daemons on the same socket
using advisory locks

2020-09-15: Restore children as orphans if it takes too long
to get them from the daemon.

2020-09-15: Implement partial attachment.

When restoring windows, we used to block on attaching to the
daemon. If the daemon is not feeling well, it can take
forever.

Now we wait to restore the windows until we have received
child reports from the daemon. We create the job manager as
part of this process. Then we can restore the arrangement
and marry up the job manager with the PTYTask for the new
session.

2020-09-13: Composer improvements: turn off the various
automatic substitutions. Change the shortcut to cmd-shift-.
since cmd-. is a shortcut for esc

2020-09-13: Don't allow setting a user value with a dot. Add
an assert with message for an assert that I think was
because of this.

2020-09-13: Beta assert if you can't get the app support
directory to get the reason why, since there were beta
crashes for it being nil.

2020-09-13: Don't use NSTask.waitUntilExit because it's not
safe to use off the main thread. FFS

2020-09-13: Remove filterWithBlock which is the same as
filteredWithBlock

2020-09-13: Don't write unsyncable keys when saving prefs

2020-09-13: Clean up untitled window opening during startup
and don't block the main thread on loading the restorable
state.

Delay running post-restoration block until sqlite-based
restoration completes.

Allow multiple post-restoration blocks.

Prevent opening an untitled window until sqlite-based and
native restoration is done.

Use the utntiled window state machine to prevent opening
untitled windows when the default arrangement is opened or
initial untitled windows are disabled.

Rewrite the untitled window state machine to be simpler.

Do not adopt orphans until window restoration is completely
finished.

Do not open an untitled window until window restoration is
completely finished.

Fix invalidation of iTermGraphDatabase, which didn't assign
to _invalid.

Make attemptRecovery:encoder: close the db when it fails.

Grant the restorable state controller the ability to notify
its delegate when it has enqueued restoration for all
windows.

Load the restoration index asynchronously when using
sqlite-based restoration to avoid blocking the app on
loading that state.

2020-09-13: Remove TODO. When we initially load the image it
is not attached to a window so it uses scale 2. That works
fine when going from hidpi to lowdpi or vice versa.

2020-09-13: Add bellCount variable to enable the analog bell
in PR 428

2020-09-12: Fix a bug where tmux windows would shrink on
10.14 when there was a window border. The root terminal view
incorrectly computed the tabview size: it subtracted a point
for a bottom border inset. PseudoTerminal's
windowDecorationSize correctly ignored it. That caused the
tab view to be a point smaller thanit should have been,
which caused tmux to shrink the window by one cell. The
problem continues to repeat until it's 1x1 and it
disconnects. Same issue for side margins. Issue 9048

2020-09-12: Add proper support for modifyOtherKeys. Change
cursor keys based on application cursor keys, not
application keypad mode.

2020-09-12: Fix warnings

2020-09-11: Assign identifiers to the window style menu
items and regen python docs

2020-09-11: Re-sign sync_title.its and theme.its using
sigarchive v2

2020-09-11: Add more logging for why the password manager
closes for issue 9129

2020-09-11: Fix a bug where we'd resize the session when
changing the active space because the backing scale factor
became 0 when the view was in an inactive space. Issue 9132

2020-09-11: Drag snippet rows as strings so they can be
dropped in PTYTextView

2020-09-11: Fix prefs toolbar on Big Sur

2020-09-11: Fix a bunch of bugs with XMP invalidation
handlers, which are dark magic

2020-09-11: Improve sqlite-based state restoration.

- Eliminate the unnecessary factory class.  - Add an
advisory lock to keep two iTerm2 processes from writing to
the same db, which breaks it.  - Refactoring to simplify
various things.  - Fix a number of assertion failures in
recovery scenarios. I tested deleting the sqlite db,
changing its permissions to 000, and deleting & changing its
directory permissions to 000.  - Fix a bug where didSave was
never called because weakSelf was not initialized.

I need to come back and fix the unit tests, which were
broken badly by this change.

2020-09-11: Add Snippets and Actions as first-class
citizens.

Adds a new tab to prefs for Shortcuts, which contains
snippets and actions.  Add status bar components, main menu
items, and context menu items.  Add snippets to open
quickly.

2020-09-10: Support file urls with fragments

2020-09-09: Disable enabling CSI u mode by control sequence

2020-09-07: Open prefs panel centered on the screen

2020-09-07: Status bar improvements:

- Report errors from status bar function call component.  -
Make all non-graphic status bar components have min/max
width.  - Change both layout algorithms to respect min/max
width.  - Modify the stable layout algorithm to allow
variable sizes when min/max widths are present.  - Fix how
the function call component measures its minimum width.  -
Make graphic components' min size the number of values they
can hold, which reduces the amount of status bar layout that
happens before they have that many values.

2020-09-07: Fix fragmenting large messages sent from server
to client.

2020-09-07: Fix a write to a dangling pointer because there
was a race when setting up a connected unix domain socket.
Trying to do this with threads is probably impossible, so do
it with nonblocking file descriptors instead.

2020-09-06: Remove iTermTrivialExpressionEvaluator, which
was wrong when there was an escaped backslash. Instead,
avoid swifty string evaluation when all the parts of the
interpolated string are literals.

2020-09-06: Change how backslashes are interpreted in
interpolated strings. A backslash followed by an
unrecognized character (not n, a, t, r, or backslash) used
to remove the backslash. But that broke backslashes in
profile custom commands that included a backslash. For
example, launching the repl would have a backslash before
the space in Application Support, which was simply removed.
I don't expect this will be a big problem because people who
escaped their backslashes will not see a difference.
However, people who relied on the backslash being removed
will see different behavior. This fixes the REPL, which was
broken after the removal of the ApplicationSupport symlink.

2020-09-06: Fix a bug where child reports over 1k couldn't
be sent. sendmsg() either sends all or none of its input.

2020-09-06: Fix a bug where the
sources/iTermFileDescriptorMultiClient was released before
its completion block could be called when a handshake fails.
This caused a hang on launch when the job manager's
attachToServer blocked on beginAttachToServer's completion
block running.

2020-09-06: Optimize evaluating swifty strings that have no
subexpressions.

2020-09-06: Optimize calculating the attributed string for a
tab shortcut.

2020-09-04: Add some polish to global search

2020-09-04: Move kScreenStateIntervalTreeKey and
kScreenStateCursorCoord into the right place. Fixes a bug
where marks weren't restored properly

2020-09-03: Remove unreachable code. iTermController is
nilled out before applicationWillTerminate: runs.

2020-09-03: Fix a race. When we save state, the record gets
rowIDs assigned in a private queue but we save the record to
the iTermGraphDatabase on the main queue. If you save twice
in succession, you might see an after record that has no
rowid. I think? It's complicated, but this is definitely an
improvement even if it doesn't fix that bug.

2020-09-03: Don't crash when creating an indexset with range
(NSNotFound,0). Not quite sure how this happened. It's in
the recently refactored selection code. It's silly for
NSIndexSet to assert in this case since it's a reasonable
way to express no range.

2020-09-03: Don't beta-crash when you ask for the cell in
the right margin. It can happeh when auto command completion
is enabled in zsh and you press control C when the cursor is
just before the right margin.

2020-09-03: Bring back support for nvidia GPUs

2020-09-02: Fix a bug where duplicating a tab would not give
the new tab a unique guid, causing a crash when we try to
save session state. When state restoration throws an
exception, log its details in the crash log (previously we
just asserted). Issue 9117.

2020-09-01: Improve dynamic profiles error reporting

2020-09-01: Rate limit errors from background jobs. Issue
9116

2020-09-01: Add debug logging for tab activity state

2020-09-01: Background tabs' sessions' views don't have
windows so we got a backing scale factor of 0 so we would
clear the pixel size in TIOCGWINSZ and then set it properly
when the tab is activated, causing the activity indicator to
toggle. Issue 9099

2020-08-31: Fix autoresizing mask for settings button in
password manager. Make next key view of search field the
2-fac code.

2020-08-31: Assign cmd-b as keyboard shortcut to the
broadcast button in the password manager. Issue 9094

2020-08-31: Escape the value we set KEY_INITIAL_TEXT to in
application:openFile: so that the backslashes survive swifty
string evaluation. Issue 9104

2020-08-31: Context menu improvements.

- Fix parsing user-provided URLs with // in query parameter.
- Fix some failing tests - Don't show pause/unpause tmux in
context menu in versions of tmux that don't support it.  -
Move context menu code into its own file.  - Add support for
context menu providers in Python API.

2020-08-30: Don't log sql statemetns to console in debug
builds

2020-08-29: Center the script console. Make it wider. Give
it an autosave name.

2020-08-29: Make registered functions split smaller in
scripting inspector

2020-08-29: Center script inspector. Remember its splitview
settings

2020-08-29: Add process title support.

The jobs tool, job status bar component, and a new
processTitle variable now show the perhaps-modified process
name (e.g., -tcsh instead of tcsh). Automatic profile
switching will check both names.

Issue 4214

2020-08-29: Fix vertical offset of timestamps in metal.
Should use bottom margin, not top.

2020-08-29: Add advanced pref to show timestamps by default

2020-08-29: Treat 'ignore' as an actionable key mapping.
Actionable key mappings intercept keydown events early, and
Ignore should because we want it to (for example) supercede
a main menu shortcut. Issue 9100

2020-08-29: Fixes for advanced prefs: Capitalize Minimal,
call it a Theme, not a tab style.

2020-08-29: Prevent windows created with
application:openFile: from loading auto-save frames because
then they show up exactly under a window that gets restored
in the near future. Issue 9104

2020-08-29: Fix an exception in subarrayFromIndex: when
requesting too big of an index

2020-08-29: Add debug logging for issue 9108

2020-08-29: Add a warning to fix slowness

2020-08-29: Rename showSearchResultsMinimap to
showLocationsInScrollbar

2020-08-29: To my horror, sometimes -scrollToEnd shows
overlay scrollbars briefly. Worse, there's no way to disable
it. Do something disgusting with a private API. Issue 9096

2020-08-28: Don't enter copy mode automatically without a
selection. Commit 9675e01cc5b695199205f870e9278d6dfbe270cf
was insufficient because it did the test in a useful but not
critical place. The test added in 9675e01 was correct
insofar as it wouldn't treat shift-arrow as an actionable
keymapping if there was no selection. But if that keystroke
doesn't have another interpretation then it could still make
it in to -shouldAcceptKeyDownEvent: which would then enter
copy mode automatically.

2020-08-28: Fix a bug where on the first backgrounding we'd
re-write all the blocks out. It happened because PTYTab
didn't have a stable stringUniqueIdentifier (don't know why)
and because LineBlock overwrote its restored GUID.

2020-08-28: Bump bash shell integration version

2020-08-28: Fix broken test for tmux version that prevented
creating tabs in tmux 1.8

2020-08-27: Fix a bug where tmux windows shrink each time
you reattach. It happens when you initially have a single
tab and no tabbar. Then the gateway session is buried. The
tabbar briefly exists as a tabbar accessory. It was wrong to
use the tabview's frame as the target size when computing
-tmuxSize because the tabview is about to brow by the hight
of the just-removed-from-the-titlebar tabbar. Issue 9048.
CHERRY PICK TO 3.3.13

2020-08-27: Fix alignment and spacing for blending control

2020-08-27: Avoid restoring grids with bad dictionaries. I
think it happened if you saved state when there was no alt
grid, which is maybe possible with tmux integration sessions

2020-08-27: Add debug logging for scrollWheel routing. Issue
9089

2020-08-27: Add a tooltip to the session name lock icon

2020-08-27: Auto-lock session name on edit. Fix a bug where
the session name got reset when focusing the session. Issue
9085

2020-08-24: Change selection to use absolute coordinates.

2020-08-22: Clean up captured output.

- Add a control sequence (OSC 1337 ClearCapturedOutput) to
clear the current captured output. No data is lost, it's
just removed from the UI.  - Change the presentation to use
a - as a bullet instead of an actual bullet, which is ugly.
- You can click on a selected row to re-highlight the
captured line.

Issue 5418

2020-08-22: Add global search to replace expose tabs.

2020-08-22: Remove Expos, which was unusably slow

2020-08-22: Add Window > Window Style

This lets you change the window style.

I decided not to put it in Edit Session because it's not a
property of the session. Therefore we would have to do a lot
of work to keep it synchronized among all panes in the
window.

Issue 6466

2020-08-22: Remove dead code

2020-08-22: Move code related to window style into a
category. ARCify it.

2020-08-21: Fix the font for the snippets tool

2020-08-20: Add iTermBackgroundCommandRunner

Move code to run a command in the background out of
PTYTextView and into its own class. Clean it up and use it
for script triggers, too. Modify it to use the user's path
with the new environment variable exfiltration feature.

Issue 7765.

2020-08-20: Use the user's shell when running a command for
a smart selection action. Issue 7765

2020-08-19: Make command history prefix checking
case-insensitive. Issue 8659

2020-08-19: Auto command history improvements

Don't steal left and right arrow. Avoid opening auto command
history when not at the end of the command. Issue 6162.

2020-08-19: Use option+return to exit auto command
completion with a newline. Issue 8078

2020-08-19: Make auto command completion less annoying.
Issue 6887.

Use shift-enter to send command.

Don't steal enter, tab, or control keys (except ^P and ^N
which navigate the list).

Make footers in popups look nicer.

2020-08-18: Change how screen state is saved for
restoration.

Previously, the current grid was appended to the line buffer
and the whole mess was saved.

This made it difficult to restore to the primary buffer when
coming from the alt buffer (issue 8125).

This commit changes how we save state to make it easier to
restore. The line buffer, primary grid, and alt grid are
saved separately and restored separately.

Because of the new sqlite-based state restoration system,
I've removed the limit on the number of lines to save. This
might turn out to be a performance problem. I think it won't
be because only deltas get saved and the expensive work
happens on a background thread.

2020-08-17: Ensure the whole dirty region is drawn to. Issue
5665.

2020-08-17: Increase line spacing in internet-free shell
integration installer

2020-08-17: Use URLWithUserSuppliedString in mail:

2020-08-17: Fix percents in user-supplied URLs that are not
percent escapes. Use NSURLComponents for composing text
editor URLs for semantic history

2020-08-17: Replace stringByEscapingForURL with
URLWithUserSuppliedString

2020-08-17: Add script to release a beta build that was
built but not notarized in Big Sur, because xcrun is broken
on big sur

2020-08-17: Update shell integration utilities

2020-08-16: Improve URLWithUserSuppliedString.

Use the proper escaping for each part (IDN, percent,
whatever random thing is done for user and password, and
nothing for scheme).

2020-08-16: Build URLs to search the web smarter. Take in to
account what part of the URL is parameterized with %@ and
escape it properly, since (for example) query parameters are
percent escaped while hostnames are IDNed, etc. Issue 8119

2020-08-16: Perform an integrity check after opening the
restorable state db. Delete dangling references after
opening. Create an index to make that fast

2020-08-16: Various improvements to preceding commit for
security, readability.

2020-08-16: Extract usernames from txt-record entries in
bonjour/mDNS advertisements

2020-08-15: Don't disable metal when window is obscured or
bounce it when screen parameters change. This caused
slowness when switching back to the app with cmd-tab
sometimes. Issue 9044

2020-08-15: Fix a bunch of analyzer complaints. ARCify some
files in the process. Fix a bug where the slow operation
gateway ran the callback on the wrong thread. Fix some minor
memory leaks.

2020-08-15: Arcify iTermPasteHelper, make its delegate weak
in an attempt to fix the leak Alexander reported in issue
8128

2020-08-15: Copy iTermServer to a safe place before
executing it. Issue 9022.

2020-08-14: Fix a bug where restoring multiple windows would
just restore the first window many times. Issue 9076

2020-08-14: Fix build

2020-08-14: Add snippets tool. Issue 5386

2020-08-13: Make iTermImageWell respond to a single click.
Issue 9072

2020-08-13: Add some debug logging to authsock code

2020-08-13: Rebuild NMSSH

2020-08-13: Update NMSSH

2020-08-13: Fix some bugs for building third party
dependencies

2020-08-13: Rebuild NMSSH

2020-08-13: Get SSH_AUTH_SOCK from the user's shell and tell
libssh2 what it is when connecting via scp. NOTE: This won't
compile until I update NMSSH.framework

2020-08-13: Add the ability to repair saved arrangements
with bad initial working directories. Issue 9065.

Change pidinfo to a general slow operation xpc process. Add
the ability to check if a directory exists.

When a session is created from a named saved arrangement
check if its initial directory exists. If not, prompt the
user to repair the arrangement.

2020-08-12: Don't get into an infinite loop parsing a DCS
sequence that has an ESC on the last byte of a 1024 bit
chunk. Issue 9070

2020-08-12: Fix test that didn't compile

2020-08-12: Delete TCP websocket server support. Force full
environment scripts to upgrade to unix domain socket
environment.

2020-08-11: Document built-in API methods

2020-08-11: Set loadAction on the drawable colorAttachment.
Issue 9035.

2020-08-11: Move iTermMinimalComposerViewController.xib into
Interfaces

2020-08-11: Reclassify paste actions as text-sending so that
keybindings with those actions will only take effect when
PTYTextView is first responder, not something like the
search field. Issue 9067

2020-08-10: When you specify an inline image's width in
pixels and height is auto, don't round heights up to the
next cell. This fixes unnecessary truncation.

2020-08-10: Report pixels, not points, to posix window size.
Issue 9060

2020-08-10: Fix a bunch of bugs where inline images were
unnecessarily scaled a bit.

2020-08-10: Refactor graphic status bar components. Make
sparklines components animate smoothly. Use layers instead
of trying to build images for better performance. Issue 8976

2020-08-09: Fix installing of delta updates, broken by
ApplicationSupport removal

2020-08-09: Remove NSLog

2020-08-08: Add postgres icon

2020-08-08: Disable malloc scribble

2020-08-08: Fix possible retain cycle from issue 8840

2020-08-08: Do away with ApplicationSupport.

The reason for creating an ApplicationSupport symlink to
"Application Support" is that a shebang can't take a path
with a space. But there's a workaround:

 #!/usr/bin/env -S ".../Application\_Support/..."

Issue 8919.

2020-08-08: Remove stack traces from ProfileModel debug code
to improve startup performance

2020-08-07: Revert "Add various exceptions to CSI u support
for backward compatibility."

This reverts commit
2de95135556a38498b1c8e76c80b392c2b1049a2.

See issue 9052

2020-08-07: Remove deviation from CSI u spec for control-?.
Backspace does the job fine

2020-08-06: Dismiss paste bracketing announcement when a
control sequence turns it on or off. Issue 9046

2020-08-06: Respect the dismemberScrollView setting on
10.14. Issue 8826. I believe that using layers actually
fixes the performance issue anyway

2020-08-06: Change help for clock status bar component to
explain localize date format's trap. Issue 7849

2020-08-05: Defer calling -[TmuxController
fitLayoutToWindows] after adjusting a tab's layout until all
tabs in the window have had their layouts updated. Hopefully
fixes 9024, which I cannot reproduce.

2020-08-05: Streaming state restoration.

The macOS window restoration system is no longer used except
for migrating users from a previous version to this one. We
save state in a SQLite database under Application Support
now. The benefit is that we can avoid saving giant
scrollback histories that have not changed, or at least only
saving the very last part of it when the beginning is
unchanged. Hopefully it should be more reliable, as well.

The previous implementation that works kind of like Apple's
is still here in case of emergency but it can be removed
after this is in a safe place.

For all the gory details, see the delta_encoding branch.

Fixes these issues:
https://gitlab.com/gnachman/iterm2/issues/6632
https://gitlab.com/gnachman/iterm2/issues/7909
https://gitlab.com/gnachman/iterm2/issues/7278
https://gitlab.com/gnachman/iterm2/issues/6189
https://gitlab.com/gnachman/iterm2/issues/5164
https://gitlab.com/gnachman/iterm2/issues/4667
https://gitlab.com/gnachman/iterm2/-/issues/8990
